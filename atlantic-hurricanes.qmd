---
title: "Hurricanes in the Atlantic"
author: "Carmen Hoyt"
date: last-modified
editor_options: 
  chunk_output_type: console
execute:
  warning: false
  messages: false
format:
  html:
      toc: true
      code-fold: true
---

# Hurricanes in the Atlantic

An assessment of how the costs associated with hurricane damage in the Atlanic have changed over time, and the factors driving these costs.

# Data

I will be using Kaggle's [North American Hurricanes from 2000](https://www.kaggle.com/datasets/middlehigh/north-american-hurricanes-from-2000) dataset to test the following hypothesis:

- H0: Storm damage costs aren't changing over time.
- HA: Storm damage costs are changing over time. 

Factors potentially driving damage costs include max wind speed, rainfall, time (in years since 2000), and the number of places affected. Of the factors potentially driving these damage costs:

- H0: Rainfall has no effect on storm damage costs.
- HA: Rainfall has an effect on storm damage costs.

# Analysis

Relevant sample statistic: regression coefficient

**LOOK AT LOG DAMAGE?**

## Import packages
```{r}
#| code-summary: Expand Code
# Load required packages
library(tidyverse)
library(here)
library(janitor)
library(patchwork)
```

**Remove NAs for damage? all? strongest storms? or just a few points? Justify.**

## Import data
```{r}
#| code-summary: Expand Code
# Remove scientific notation
options(scipen=999)

# Import hurricane data
hurricane_data <- read_csv(here("data", "Hurricane Data.csv")) %>%
  clean_names()

# Remove rows with NA values for damage costs?
print(paste("There are", sum(is.na(hurricane_data$damage_usd)), "NA values associated with damage cost."))
complete_df <- na.omit(hurricane_data)
#hurricane_data_cleaned <- hurricane_data[rowSums(is.na(hurricane_data$damage_usd)) == 0, ]
  
# Find total number of areas affected
hurricane_data_cleaned <- complete_df %>%
  separate_longer_delim(affected_areas, ",") %>%
  group_by(year, name, category, rain_inch, highest_wind_speed, damage_usd, fatalities) %>%
  summarise(total_areas = n()) %>%
  mutate(damage_mil = damage_usd/1000000,
         time = year - 2000)
```

## Visualize
```{r}
#| code-summary: Expand Code
# Cost of damage by category
ggplot(hurricane_data_cleaned, aes(x = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), y = damage_mil)) +
  geom_boxplot() +
  labs(x = "Catetory",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage by Category 2000-2023") +
  theme_minimal()
```

```{r}
#| code-summary: Expand Code
# Cost of damage over time
ggplot(hurricane_data_cleaned, aes(x = time, y = damage_mil, color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
  geom_point() +
  labs(x = "Years since 2000",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage over Time",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()
```

Damage ~ Time Linear Regression
```{r}
#| code-summary: Expand Code
time_model <- lm(damage_mil ~ time, data = hurricane_data_cleaned)
summary(time_model)
```

Confidence Intervals:
Assess time variable
```{r}
#| code-summary: Expand Code
# Histogram of time data
ggplot(hurricane_data_cleaned, aes(time)) +
  geom_histogram(bins = round(sqrt(length(hurricane_data_cleaned$time))), # set number of bins
                 fill = "steelblue", 
                 color = "black") +
  labs(x= "Years Since 2000",
       y = "Count",
       title = "Distribution of Time Data") +
  theme_minimal()
```

Remove outliers in the response variable (damage)?
```{r}
#| code-summary: Expand Code
iqr_damage <- quantile(hurricane_data_cleaned$damage_mil)[[4]] - quantile(hurricane_data_cleaned$damage_mil)[[2]]
low_damage <- quantile(hurricane_data_cleaned$damage_mil)[[2]] - (iqr_damage*1.5)
high_damage <- quantile(hurricane_data_cleaned$damage_mil)[[4]] + (iqr_damage*1.5)

# Low damage is a negative number, so we are only concerned with outliers above high damage
damage_outliers <- hurricane_data_cleaned$damage_mil[hurricane_data_cleaned$damage_mil > high_damage]

# Remove rainfall outliers
no_outliers <- hurricane_data_cleaned %>% 
  filter(damage_mil < min(damage_outliers))
```

Simulate the population:
```{r}
#| code-summary: Expand Code
# Extract our estimates for beta0, beta1, and sigma 
beta0_estimate <- summary(time_model)$coefficients[1,1]
beta1_estimate <- summary(time_model)$coefficients[2,1]
sigma <- summary(time_model)$sigma
time_damage_pop <- tibble(
  # Predictor (uniformly distributed)
  time = runif(1e4, 
              min(hurricane_data_cleaned$time),
              max(hurricane_data_cleaned$time)),
  # Mean response
  mean_damage_mil = beta0_estimate + beta1_estimate * time,
  # Simulated response (mean and standard deviation accounted for)
  damage_mil = rnorm(1e4, mean = mean_damage_mil, sd = sigma)
)

# Visualize
ggplot(time_damage_pop, aes(time, damage_mil)) +
  geom_point(shape = 21)
```

```{r}
#| code-summary: Expand Code
# Draw a sample
time_damage_sample <- sample_n(time_damage_pop, 21)
# Calculate the point estimate and standard error
sample_lm <- lm(damage_mil ~ time, time_damage_pop)
pe <- summary(time_model)$coefficients[2, 1]
se <- summary(time_model)$coefficients[2, 2]
# Construct the confidence interval
sample_ci <- c(point_estimate = pe,
               ci95_lower = pe - 1.96 * se,
               ci95_upper = pe + 1.96 * se)

print(paste("With 95% certainty, the time coefficient would fall in the interval:", sample_ci[2], "to", sample_ci[3]))
```
**This is an outrageous CI.**

## Exploration of factors driving damage costs
Linear Regression Model:
```{r}
#| code-summary: Expand Code
# Create the model
damage_model <- lm(damage_mil ~ highest_wind_speed + rain_inch + year + total_areas, data = hurricane_data_cleaned)
summary(damage_model)
```

### 1. Wind
Quantify uncertainty:
```{r}
#| code-summary: Expand Code
# Distribution of Beta1
beta1_estimate <- summary(damage_model)$coefficients[2, 1]
beta1_se <- summary(damage_model)$coefficients[2, 2]

# Under null hypothesis
tibble(beta1 = seq(-(beta1_estimate + beta1_se),
                   beta1_estimate + beta1_se,
                   length.out = 200),
       density = dnorm(beta1, mean = 0, sd = beta1_se)) %>% 
# Visualize
  ggplot(aes(beta1, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta1_estimate, color = "firebrick")
```

Calculate the probability of the point estimate under the null:
```{r}
#| code-summary: Expand Code
# p-value for Beta1
pval_beta1 <- 2 * pnorm(-abs(beta1_estimate), mean = 0, sd = beta1_se)
print(paste0("The p-value for beta 1 is: ", pval_beta1, "."))
```

Remove outliers?
```{r}
#| code-summary: Expand Code
# Histogram of wind data
ggplot(hurricane_data_cleaned, aes(highest_wind_speed)) +
  geom_histogram(bins = round(sqrt(length(hurricane_data_cleaned$highest_wind_speed))), # set number of bins
                 fill = "steelblue", 
                 color = "black") +
  labs(x= "Max Wind Speed (mph)",
       y = "Count",
       title = "Distribution of Wind Data") +
  theme_minimal()

iqr_wind <- quantile(hurricane_data_cleaned$highest_wind_speed)[[4]] - quantile(hurricane_data_cleaned$highest_wind_speed)[[2]]
low_wind <- quantile(hurricane_data_cleaned$highest_wind_speed)[[2]] - (iqr_wind*1.5)
high_wind <- quantile(hurricane_data_cleaned$highest_wind_speed)[[4]] + (iqr_wind*1.5)

if ((unique(hurricane_data_cleaned$highest_wind_speed > high_wind) == FALSE) &
    (unique(hurricane_data_cleaned$highest_wind_speed < low_wind) == FALSE)) {
  print("There are no outliers in the wind data.")
} else {
  print("There are outliers!")
}
```

### Rainfall
Quantify uncertainty
```{r}
#| code-summary: Expand Code
# Distribution of Beta2
beta2_estimate <- summary(damage_model)$coefficients[3, 1]
beta2_se <- summary(damage_model)$coefficients[3, 2]

# Visualize
tibble(beta2 = seq(-(beta2_estimate + beta2_se),
                   beta2_estimate + beta2_se,
                   length.out = 200),
       density = dnorm(beta2, mean = 0, sd = beta2_se)) %>% 
  ggplot(aes(beta2, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta2_estimate, color = "firebrick")
```

Calculate the probability of the point estimate under the null
```{r}
#| code-summary: Expand Code
# p-value for Beta1
pval_beta2 <- 2 * pnorm(-abs(beta2_estimate), mean = 0, sd = beta2_se)
print(paste0("The p-value for beta 2 is: ", pval_beta2, "."))
```
Our p-value is less than 0.05, so we reject the null and interpret our model to say that it is possible rainfall has an effect on storm damage costs.

**While we can't accept the alternative hypothesis, we don't rule it out as we do the null hypothesis.**

Remove outliers?
```{r}
#| code-summary: Expand Code
# Histogram of rain data
ggplot(hurricane_data_cleaned, aes(rain_inch)) +
  geom_histogram(bins = round(sqrt(length(hurricane_data_cleaned$rain_inch))), # set number of bins
                 fill = "steelblue", 
                 color = "black") +
  labs(x= "Rainfall (in)",
       y = "Count",
       title = "Distribution of Rainfall Data") +
  theme_minimal()

iqr_rain <- quantile(hurricane_data_cleaned$rain_inch)[[4]] - quantile(hurricane_data_cleaned$rain_inch)[[2]]
low_rain <- quantile(hurricane_data_cleaned$rain_inch)[[2]] - (iqr_rain*1.5)
high_rain <- quantile(hurricane_data_cleaned$rain_inch)[[4]] + (iqr_rain*1.5)

# Low rain is a negative number, so we are only concerned with outliers above high rain
rain_outliers <- hurricane_data_cleaned$rain_inch[hurricane_data_cleaned$rain_inch > high_rain]

# Remove rainfall outliers
no_outliers <- no_outliers %>% 
  filter(rain_inch < min(rain_outliers))
```

### Year
Quantify uncertainty
```{r}
#| code-summary: Expand Code
# Distribution of Beta3
beta3_estimate <- summary(damage_model)$coefficients[4, 1]
beta3_se <- summary(damage_model)$coefficients[4, 2]

# Visualize
tibble(beta3 = seq(-(beta3_estimate + beta3_se),
                   beta3_estimate + beta3_se,
                   length.out = 200),
       density = dnorm(beta3, mean = 0, sd = beta3_se)) %>% 
  ggplot(aes(beta3, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta3_estimate, color = "firebrick")
```

Calculate the probability of the point estimate under the null
```{r}
#| code-summary: Expand Code
# p-value for Beta3
pval_beta3 <- 2 * pnorm(-abs(beta3_estimate), mean = 0, sd = beta3_se)
print(paste0("The p-value for beta 3 is: ", pval_beta3, "."))
```

Remove outliers? **Shouldn't be any?**
```{r}
#| code-summary: Expand Code
# Histogram of year data
ggplot(hurricane_data_cleaned, aes(year)) +
  geom_histogram(bins = round(sqrt(length(hurricane_data_cleaned$year))), # set number of bins
                 fill = "steelblue", 
                 color = "black") +
  labs(x= "Year",
       y = "Count",
       title = "Distribution of Year Data") +
  theme_minimal()
```

### Number of Places Affected
Quantify uncertainty
```{r}
#| code-summary: Expand Code
# Distribution of Beta4
beta4_estimate <- summary(damage_model)$coefficients[5, 1]
beta4_se <- summary(damage_model)$coefficients[5, 2]

# Visualize
tibble(beta4 = seq(-(beta4_estimate + beta4_se),
                   beta4_estimate + beta4_se,
                   length.out = 200),
       density = dnorm(beta4, mean = 0, sd = beta4_se)) %>% 
  ggplot(aes(beta4, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta4_estimate, color = "firebrick")
```

Calculate the probability of the point estimate under the null
```{r}
#| code-summary: Expand Code
# p-value for Beta4
pval_beta4 <- 2 * pnorm(-abs(beta4_estimate), mean = 0, sd = beta4_se)
print(paste0("The p-value for beta 4 is: ", pval_beta4, "."))
```

Remove outliers?
```{r}
#| code-summary: Expand Code
# Histogram of place data
ggplot(hurricane_data_cleaned, aes(total_areas)) +
  geom_histogram(bins = round(sqrt(length(hurricane_data_cleaned$total_areas))), # set number of bins
                 fill = "steelblue", 
                 color = "black") +
  labs(x= "Total # Areas Affected",
       y = "Count",
       title = "Distribution of Total Areas Data") +
  theme_minimal()

iqr_places <- quantile(hurricane_data_cleaned$total_areas)[[4]] - quantile(hurricane_data_cleaned$total_areas)[[2]]
low_places <- quantile(hurricane_data_cleaned$total_areas)[[2]] - (iqr_places*1.5)
high_places <- quantile(hurricane_data_cleaned$total_areas)[[4]] + (iqr_places*1.5)

# Low rain is a negative number, so we are only concerned with outliers above high rain
places_outliers <- hurricane_data_cleaned$total_areas[hurricane_data_cleaned$total_areas > high_places]

# Remove rainfall outliers
no_outliers <- no_outliers %>% 
  filter(total_areas < min(places_outliers))
```

## Plots

```{r}
#| code-summary: Expand Code
no_outliers_model <- lm(damage_mil ~ highest_wind_speed + rain_inch + year + total_areas, data = no_outliers)
summary(no_outliers_model)
```

Wind:
```{r}
#| code-summary: Expand Code
ggplot(no_outliers, aes(x = highest_wind_speed, y = damage_mil)) +
  geom_point() +
  geom_abline(intercept = coef(no_outliers_model)[1],
              slope = coef(no_outliers_model)[2],
              color = "blue") +
  labs(x = "Max Wind Speed (mph)",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage by Max Wind Speed") +
  theme_minimal()
```

Rainfall:
```{r}
#| code-summary: Expand Code
ggplot(no_outliers, aes(x = rain_inch, y = damage_mil)) +
  geom_point() +
  geom_abline(intercept = coef(no_outliers_model)[1],
              slope = coef(no_outliers_model)[3],
              color = "blue") +
  labs(x = "Rainfall (in)",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage by Rainfall") +
  theme_minimal()
```

Year:
```{r}
#| code-summary: Expand Code
ggplot(no_outliers, aes(x = year, y = damage_mil)) +
  geom_point() +
  geom_abline(intercept = coef(no_outliers_model)[1],
              slope = coef(no_outliers_model)[4],
              color = "blue") +
  labs(x = "Year",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage by Year") +
  theme_minimal()
```

Number of Places:
```{r}
#| code-summary: Expand Code
ggplot(no_outliers, aes(x = total_areas, y = damage_mil)) +
  geom_point() +
  geom_abline(intercept = coef(no_outliers_model)[1],
              slope = coef(no_outliers_model)[5],
              color = "blue") +
  labs(x = "Number of Areas Affected",
       y = "Damage (Millions of USD)",
       title = "Cost of Storm Damage by Areas") +
  theme_minimal()
```
