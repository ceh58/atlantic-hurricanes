---
title: "EDS 222: Final Project"
author: "Carmen Hoyt"
date: last-modified
editor_options: 
  chunk_output_type: console
execute:
  warning: false
  messages: false
format:
  html:
      toc: true
      code-fold: true
---

# Import packages
```{r}
# Load required packages
library(tidyverse)
library(here)
library(janitor)
```

Goal: To understand how hurricanes affecting Florida have changed over time:

1. Have storms increased in frequency and intensity (category) over time?

- H0: Storms have not increased in frequency and intensity (category) over time.
- HA: Storms have become more frequent and more intense (category) over time.

2. What is driving the total cost of damages associated with these storms? Wind? Rain?

# Import data
```{r}
# Import hurricane data
hurricane_data <- read_csv(here("data", "Hurricane Data.csv")) %>%
  clean_names()

# Filter for Florida hurricanes
florida_hurricanes <- hurricane_data %>%
  filter((str_detect(affected_areas, "Florida"))) %>%
  mutate(damage_mil = damage_usd/1000000)
```

# Exploration

## Visualize
```{r}
# Cost of damage by category
ggplot(florida_hurricanes, aes(x = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), y = damage_mil)) +
  geom_boxplot() +
  labs(x = "Catetory",
       y = "Damage (Millions of USD)",
       title = "Storm Damage by Category") +
  theme_minimal()
```

# 2.

Hypothesis:

- H0: Max wind speed does not have an effect on damage costs.
- Ha: Max wind speed does have an effect on damage costs

Relevant sample statistic: regression coefficient (Beta1?)

Plot the data:
```{r}
ggplot(florida_hurricanes, aes(x = highest_wind_speed, y = damage_mil)) +
  geom_point() +
  labs(x = "Max Wind Speed (mph)",
       y = "Damage (Millions of USD)",
       title = "Storm Damage by Wind") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()
```

Log damage:
```{r}
ggplot(florida_hurricanes, aes(x = highest_wind_speed, y = log(damage_mil))) +
  geom_point() +
  labs(x = "Max Wind Speed (mph)",
       y = "Log Damage (Millions of USD)",
       title = "Log Storm Damage by Wind") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()
```

Linear regression:
```{r}
wind_model <- lm(damage_mil ~ highest_wind_speed, data = florida_hurricanes)
summary(wind_model)
```

Visualize the distribution of the regression coefficient (Beta1?) under the null hypothesis:
```{r}
beta1_estimate <- summary(wind_model)$coefficients[2, 1]
beta1_se <- summary(wind_model)$coefficients[2, 2]
tibble(beta1 = seq(-(beta1_estimate + beta1_se),
                   beta1_estimate + beta1_se,
                   length.out = 200),
       density = dnorm(beta1, mean = 0, sd = beta1_se)) %>% 
  ggplot(aes(beta1, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta1_estimate, color = "firebrick")
```

p-value:
```{r}
pval_wind <- 2 * pnorm(-abs(beta1_estimate), mean = 0, sd = beta1_se)
print(paste("The p-value is:", pval_wind))
```

The p-value is much less than 0.05, so we reject the null hypothesis. There is a very, very small chance (the p-value?) that the relationship is due to chance. Therefore, there is wind likely has an effect on the total cost of damage.

Remove outliers?

Simulate population:
```{r}
# Simulate the population
# Extract our estimates for beta0, beta1, and sigma (i.e., the SD of the data
# around the mean response)
beta0_estimate <- summary(wind_model)$coefficients[1,1]
beta1_estimate <- summary(wind_model)$coefficients[2,1]
sigma <- summary(wind_model)$sigma
wind_damage_pop <- tibble(
  # Predictor (uniformly distributed)
  highest_wind_speed = runif(1e4, 
                      min(florida_hurricanes$highest_wind_speed),
                      max(florida_hurricanes$highest_wind_speed)),
  # Mean response
  mean_damage = beta0_estimate + beta1_estimate * highest_wind_speed,
  # Simulated response (mean and standard deviation accounted for)
  damage_usd = rnorm(1e4, mean = mean_damage, sd = sigma)
)

# Visualize
ggplot(wind_damage_pop, aes(highest_wind_speed, damage_usd)) +
  geom_point(shape = 21) +
  labs(x = "Max Wind Speed (mph)",
       y = "Damage (Millions of USD)") +
  theme_minimal()
```

```{r}
summary(lm(damage_usd ~ highest_wind_speed, wind_damage_pop))
```

Create confidence interval:
```{r}
# Draw a sample
wind_damage_sample <- sample_n(wind_damage_pop, 21)
# Calculate the point estimate and standard error
sample_lm <- lm(damage_usd ~ highest_wind_speed, wind_damage_pop)
pe <- summary(sample_lm)$coefficients[2, 1]
se <- summary(sample_lm)$coefficients[2, 2]
# Construct the confidence interval
sample_ci <- c(point_estimate = pe,
               ci95_lower = pe - 1.96 * se,
               ci95_upper = pe + 1.96 * se)
sample_ci
print(paste("With 95% certainty, the wind coefficient would fall in the interval:", sample_ci[2], "to", sample_ci[3]))
```

How many 95% CIs contain the parameter?
```{r}
repeat_ci <- replicate(100, {
  wind_damage_sample <- sample_n(wind_damage_pop, 21)
  sample_lm <- lm(damage_usd ~ highest_wind_speed, wind_damage_pop)
  pe <- summary(sample_lm)$coefficients[2, 1]
  se <- summary(sample_lm)$coefficients[2, 2]
  sample_ci <- c(point_estimate = pe,
                 ci95_lower = pe - 1.96 * se,
                 ci95_upper = pe + 1.96 * se)
  sample_ci
})

tibble(point_estimate = repeat_ci[1, ],
       ci95_lower = repeat_ci[2, ],
       ci95_upper = repeat_ci[3, ],
       ci = 1:100) %>% 
  mutate(valid = beta1_estimate >= ci95_lower & 
           beta1_estimate <= ci95_upper) %>% 
  ggplot() +
  geom_pointrange(aes(x = point_estimate, 
                      xmin = ci95_lower,
                      xmax = ci95_upper,
                      y = ci,
                      color = valid)) +
  geom_vline(xintercept = beta1_estimate, color = "firebrick")
```

Is this correct? ^

## Log Damage by Wind Speed -> a better model?
```{r}
# Log damage by wind speed
ggplot(florida_hurricanes, aes(x = highest_wind_speed, 
                               y = log(damage_mil), 
                              )) +
  geom_point() +
  labs(x = "Max Wind Speed (mph)",
       y = "Log Damage (Millions of USD)",
       title = "Log Damage by Max Wind Speed",
      ) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()

log_wind_model <- lm(log(damage_mil) ~ highest_wind_speed, data = florida_hurricanes)
summary(log_wind_model)
print(paste("The R2 for log(damage)~wind is", round(summary(log_wind_model)$r.squared, 2)))

florida_hurricanes %>% 
  select(highest_wind_speed, damage_mil) %>% 
  drop_na() %>% 
  mutate(resid = resid(wind_model)) %>% 
  ggplot(aes(highest_wind_speed, resid)) +
  geom_point()
```

Hypothesis:

- H0: Max rainfall does not have an effect on damage costs.
- Ha: Max rainfall does have an effect on damage costs

Relevant sample statistic: regression coefficient (Beta1?)

Plot the data:
```{r}
ggplot(florida_hurricanes, aes(x = rain_inch, y = damage_mil)) +
  geom_point() +
  labs(x = "Rainfall (in)",
       y = "Damage (Millions of USD)",
       title = "Storm Damage by Rainfall") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()
```

Log damage:
```{r}
ggplot(florida_hurricanes, aes(x = rain_inch, y = log(damage_mil))) +
  geom_point() +
  labs(x = "Rainfall (in))",
       y = "Log Damage (Millions of USD)",
       title = "Log Storm Damage by Rainfall") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()
```

Linear regression:
```{r}
rain_model <- lm(damage_mil ~ rain_inch, data = florida_hurricanes)
summary(rain_model)
```

Visualize the distribution of the regression coefficient (Beta1?) under the null hypothesis:
```{r}
beta1_estimate <- summary(rain_model)$coefficients[2, 1]
beta1_se <- summary(rain_model)$coefficients[2, 2]
tibble(beta1 = seq(-(beta1_estimate + beta1_se),
                   beta1_estimate + beta1_se,
                   length.out = 200),
       density = dnorm(beta1, mean = 0, sd = beta1_se)) %>% 
  ggplot(aes(beta1, density)) +
  geom_line(color = "cornflowerblue") +
  geom_vline(xintercept = beta1_estimate, color = "firebrick")
```

p-value:
```{r}
pval_rain <- 2 * pnorm(-abs(beta1_estimate), mean = 0, sd = beta1_se)
print(paste("The p-value is:", pval_rain))
```

The p-value is less than 0.05 (but not by much), so we reject the null hypothesis. There is a small chance (the p-value?) that the relationship is due to chance. Therefore, there is rain likely has an effect on the total cost of damage.

Remove outliers?

Simulate population:
```{r}
# Simulate the population
# Extract our estimates for beta0, beta1, and sigma (i.e., the SD of the data
# around the mean response)
beta0_estimate <- summary(rain_model)$coefficients[1,1]
beta1_estimate <- summary(rain_model)$coefficients[2,1]
sigma <- summary(rain_model)$sigma
rain_damage_pop <- tibble(
  # Predictor (uniformly distributed)
  rain_inch = runif(1e4, 
                      min(florida_hurricanes$rain_inch),
                      max(florida_hurricanes$rain_inch)),
  # Mean response
  mean_damage = beta0_estimate + beta1_estimate * rain_inch,
  # Simulated response (mean and standard deviation accounted for)
  damage_usd = rnorm(1e4, mean = mean_damage, sd = sigma)
)

# Visualize
ggplot(rain_damage_pop, aes(rain_inch, damage_usd)) +
  geom_point(shape = 21) +
  labs(x = "Rainfall (in)",
       y = "Damage (Millions of USD)") +
  theme_minimal()
```

```{r}
summary(lm(damage_usd ~ rain_inch, rain_damage_pop))
```

Create confidence interval:
```{r}
# Draw a sample
rain_damage_sample <- sample_n(rain_damage_pop, 21)
# Calculate the point estimate and standard error
sample_lm <- lm(damage_usd ~ rain_inch, rain_damage_pop)
pe <- summary(sample_lm)$coefficients[2, 1]
se <- summary(sample_lm)$coefficients[2, 2]
# Construct the confidence interval
sample_ci <- c(point_estimate = pe,
               ci95_lower = pe - 1.96 * se,
               ci95_upper = pe + 1.96 * se)
sample_ci
print(paste("With 95% certainty, the rainfall coefficient would fall in the interval:", sample_ci[2], "to", sample_ci[3]))
```

How many 95% CIs contain the parameter?
```{r}
repeat_ci <- replicate(100, {
  rain_damage_sample <- sample_n(rain_damage_pop, 21)
  sample_lm <- lm(damage_usd ~ rain_inch, rain_damage_pop)
  pe <- summary(sample_lm)$coefficients[2, 1]
  se <- summary(sample_lm)$coefficients[2, 2]
  sample_ci <- c(point_estimate = pe,
                 ci95_lower = pe - 1.96 * se,
                 ci95_upper = pe + 1.96 * se)
  sample_ci
})

tibble(point_estimate = repeat_ci[1, ],
       ci95_lower = repeat_ci[2, ],
       ci95_upper = repeat_ci[3, ],
       ci = 1:100) %>% 
  mutate(valid = beta1_estimate >= ci95_lower & 
           beta1_estimate <= ci95_upper) %>% 
  ggplot() +
  geom_pointrange(aes(x = point_estimate, 
                      xmin = ci95_lower,
                      xmax = ci95_upper,
                      y = ci,
                      color = valid)) +
  geom_vline(xintercept = beta1_estimate, color = "firebrick")
```
Is this correct? ^

## Log Damage by Rainfall -> a better model?
```{r}
# Log damage by wind speed
ggplot(florida_hurricanes, aes(x = rain_inch, 
                               y = log(damage_mil), 
                              )) +
  geom_point() +
  labs(x = "Rainfall (in))",
       y = "Log Damage (Millions of USD)",
       title = "Log Damage by Rainfall",
      ) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()

log_rain_model <- lm(log(damage_mil) ~ rain_inch, data = florida_hurricanes)
summary(log_rain_model)
print(paste("The R2 for log(damage)~rain is", round(summary(log_rain_model)$r.squared, 2)))

# florida_hurricanes %>% 
#   select(rain_inch, damage_mil) %>% 
#   drop_na() %>% 
#   mutate(resid = resid(rain_model)) %>% 
#   ggplot(aes(rain_inch, resid)) +
#   geom_point() +
  
```



















## Log Damage by Rainfall
```{r}
# Log damage by rain speed
ggplot(florida_hurricanes, aes(x = rain_inch, 
                               y = log(damage_mil), 
                               )) +
  geom_point() +
  labs(x = "Rainfall (in)",
       y = "Log Damage (Millions of USD)",
       title = "Log Damage by Rainfall",
       ) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  theme_minimal()

log_rain_model <- lm(log(damage_mil) ~ rain_inch, data = florida_hurricanes)
summary(log_rain_model)
print(paste("The R2 for log(damage)~wind is", round(summary(log_rain_model)$r.squared, 2)))
```

## Combined Model
```{r}
# Multiple linear regression
combined_model <- lm(damage_mil ~ highest_wind_speed + rain_inch + category, data = florida_hurricanes)
summary(combined_model)
print(paste("The R2 for damage~wind+rain is", round(summary(combined_model)$adj.r.squared, 2)))
```






```{r}
# Cost of damage by wind speed
ggplot(florida_hurricanes, aes(x = highest_wind_speed, 
                               y = log(damage_mil), 
                               size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), 
                               color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5"))
                               )) +
  geom_point() +
  labs(x = "Max Wind Speed (mph)",
       y = "Damage (Millions of USD)",
       title = "Damage vs. Max Wind Speed",
       size = "Category",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()

# Linear regression
wind_model <- lm(damage_mil ~ highest_wind_speed, data = florida_hurricanes)
summary(wind_model)
print(paste("The R2 for damage~wind is", round(summary(wind_model)$r.squared, 2)))
```
H0: Max wind speed is not a better predictor for damage costs than rainfall.
HA: Max wind speed is a better predictor for damage costs than rainfall. 


```{r}
# Cost of damage by rainfall
ggplot(florida_hurricanes, aes(x = rain_inch, y = log(damage_mil), size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
  geom_point() +
  labs(x = "Rainfall (in)",
       y = "Damage (Millions of USD)",
       title = "Damage vs. Rainfall",
       size = "Category",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  #scale_color_manual(values = c("red", "orange", "yellow", "green", "blue", "purple")) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()

ggplot(hurricane_data, aes(x = rain_inch, y = log(damage_usd), size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
  geom_point() +
  labs(x = "Rainfall (in)",
       y = "Damage (Millions of USD)",
       title = "Damage vs. Rainfall",
       size = "Category",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  #scale_color_manual(values = c("red", "orange", "yellow", "green", "blue", "purple")) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()

# Linear regression
rain_model <- lm(damage_mil ~ rain_inch, data = florida_hurricanes)
summary(rain_model)
print(paste("The R2 for damage~rain is", round(summary(rain_model)$r.squared, 2)))
```

```{r}
# Damage vs. fatalities
ggplot(florida_hurricanes, aes(x = damage_mil, 
                               y = fatalities, 
                               size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")),
                               color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5"))
                               )) +
  geom_point() +
  labs(x = "Damage (Millions of USD)",
       y = "Fatalities",
       title = "Fatalities vs. Damage",
       size = "Category",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
  #scale_color_manual(values = c("red", "orange", "yellow", "green", "blue", "purple")) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()
```

```{r}
# Damage over time
ggplot(florida_hurricanes, aes(x = year, y = damage_mil, size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
  geom_point() +
  labs(x = "Year",
       y = "Damage (Millions of USD)",
       title = "Damage (by Category) over Time",
       size = "Category",
       color = "Category") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 0.5) +
  #scale_color_manual(values = c("red", "orange", "yellow", "green", "blue", "purple")) +
  scale_color_brewer(palette = "Reds") +
  theme_minimal()
```
*This is potentially influenced by inflation or direct landfall on multiple locations.*

```{r}
# Frequency of categories over time
florida_hurricanes %>%
  group_by(year) %>%
  select(category) %>%
  mutate(frequency = n()) %>%
  ggplot(aes(x = year,
             y = frequency, 
             color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), 
             size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
  geom_point() +
  labs(x = "Year",
       y = "Frequency",
       title = "Frequency of Categories over Time",
       color = "Category",
       size = "Category") +
  scale_color_brewer(palette = "Reds") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 0.5) +
  theme_minimal()
```

```{r}
ggplot(florida_hurricanes, aes(x = category)) +
  geom_bar()
```

```{r}
# florida_hurricanes %>%
#   group_by(year) %>%
#   select(category) %>%
#   mutate(frequency = n()) %>%
#   ggplot(aes(x = year, color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
#   geom_point() +
#   labs(x = "Year",
#        y = "Frequency",
#        title = "Frequency of Categories over Time",
#        color = "Category") +
#   scale_color_brewer(palette = "Reds") +
#   geom_smooth(method = "lm", se = FALSE, linewidth = 0.5) +
#   theme_minimal()
```

```{r}
# Frequency over time
# ggplot(florida_hurricanes, aes(x = year, y = damage_mil, size = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), color = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")))) +
#   geom_bar() +
#   labs(x = "Year",
#        y = "Damage (Millions of USD)",
#        title = "Damage (by Category) over Time",
#        size = "Category",
#        color = "Category") +
#   #geom_smooth(method = "lm", se = FALSE, linewidth = 0.5) +
#   #scale_color_manual(values = c("red", "orange", "yellow", "green", "blue", "purple")) +
#   scale_color_brewer(palette = "Reds") +
#   theme_minimal()
```

```{r}
ggplot(florida_hurricanes, aes(x = factor(category, levels = c("TS", "Category 1", "Category 2", "Category 3", "Category 4", "Category 5"), labels = c("TS", "1", "2", "3", "4", "5")), y = highest_wind_speed)) +
  geom_point() +
   labs(x = "Category",
       y = "Wind Speed",
       title = "") +
  #scale_color_brewer(palette = "Reds") +
  geom_smooth(method = "lm", se = FALSE, linewidth = 0.5)
  
```

